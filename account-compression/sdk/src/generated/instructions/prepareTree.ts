/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category PrepareTree
 * @category generated
 */
export type PrepareTreeInstructionArgs = {
    maxBufferSize: number;
    maxDepth: number;
};
/**
 * @category Instructions
 * @category PrepareTree
 * @category generated
 */
export const prepareTreeStruct = new beet.BeetArgsStruct<
    PrepareTreeInstructionArgs & {
        instructionDiscriminator: number[] /* size: 8 */;
    }
>(
    [
        ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
        ['maxDepth', beet.u32],
        ['maxBufferSize', beet.u32],
    ],
    'PrepareTreeInstructionArgs',
);
/**
 * Accounts required by the _prepareTree_ instruction
 *
 * @property [_writable_] merkleTree
 * @property [**signer**] authority
 * @property [] noop
 * @category Instructions
 * @category PrepareTree
 * @category generated
 */
export type PrepareTreeInstructionAccounts = {
    anchorRemainingAccounts?: web3.AccountMeta[];
    authority: web3.PublicKey;
    merkleTree: web3.PublicKey;
    noop: web3.PublicKey;
};

export const prepareTreeInstructionDiscriminator = [41, 56, 189, 77, 58, 12, 142, 71];

/**
 * Creates a _PrepareTree_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PrepareTree
 * @category generated
 */
export function createPrepareTreeInstruction(
    accounts: PrepareTreeInstructionAccounts,
    args: PrepareTreeInstructionArgs,
    programId = new web3.PublicKey('cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'),
) {
    const [data] = prepareTreeStruct.serialize({
        instructionDiscriminator: prepareTreeInstructionDiscriminator,
        ...args,
    });
    const keys: web3.AccountMeta[] = [
        {
            isSigner: false,
            isWritable: true,
            pubkey: accounts.merkleTree,
        },
        {
            isSigner: true,
            isWritable: false,
            pubkey: accounts.authority,
        },
        {
            isSigner: false,
            isWritable: false,
            pubkey: accounts.noop,
        },
    ];

    if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
            keys.push(acc);
        }
    }

    const ix = new web3.TransactionInstruction({
        data,
        keys,
        programId,
    });
    return ix;
}
